//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Multitool.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Multitool: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Multitool()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Multitool"",
    ""maps"": [
        {
            ""name"": ""InputButtons"",
            ""id"": ""e3165b74-3810-4bde-bb7d-41e36a969817"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""cb0c1fb5-499c-47a3-aa38-810a379904e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""0005155b-b416-4183-bd31-cffdc05e6829"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""51213290-da5f-4e26-893f-e1a5c9e65169"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Value"",
                    ""id"": ""048db971-234c-4783-9af8-eea8ed484ffe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Engine"",
                    ""type"": ""Button"",
                    ""id"": ""89c5fbe7-1c51-4e1c-8f04-811c7c3d793b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Light"",
                    ""type"": ""Button"",
                    ""id"": ""f48927d9-acf1-4408-bd2d-b20c43b78602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gearbox"",
                    ""type"": ""Button"",
                    ""id"": ""27e92a61-75fa-4a12-a129-6e1247854113"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Neutral"",
                    ""type"": ""Button"",
                    ""id"": ""536deef4-76e3-442d-a847-332014fdab02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""144cc981-cc6f-4106-98be-ed53abc08e77"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a913f344-d4fc-4376-b7cd-688f9e86ea80"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22d5d05b-da71-4504-afb4-d9cd73628e67"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10e42b96-72b9-4500-b28a-13d8c2f91f86"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left/Right"",
                    ""id"": ""a9c9085a-f8b6-4ce5-9b04-7543728a8349"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""28ffb0b6-0d8f-477d-ac01-efa1a61b1dc7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""126cb10c-6ef5-44ce-ae97-9398f98877d9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""A/D"",
                    ""id"": ""c162270a-7300-4e2f-a1c2-352325da9512"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c18504c4-d964-4ed9-9168-545552b844ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7d07e841-4651-406c-ae19-e39d447d8833"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca8e2a33-2a1a-4eda-8e13-baa874db2814"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b3b4a7b-d6b8-4c59-9b6a-a466ab59610d"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Engine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49d8c566-0a57-4a16-ab5d-7596cf4e4ad5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91093507-c00e-4a98-ac0c-f6c4961a7e3d"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed73d752-b467-474d-81be-ae308457c36f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&mouse"",
                    ""action"": ""Gearbox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&mouse"",
            ""bindingGroup"": ""Keyboard&mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InputButtons
        m_InputButtons = asset.FindActionMap("InputButtons", throwIfNotFound: true);
        m_InputButtons_Throttle = m_InputButtons.FindAction("Throttle", throwIfNotFound: true);
        m_InputButtons_Brake = m_InputButtons.FindAction("Brake", throwIfNotFound: true);
        m_InputButtons_Steering = m_InputButtons.FindAction("Steering", throwIfNotFound: true);
        m_InputButtons_Handbrake = m_InputButtons.FindAction("Handbrake", throwIfNotFound: true);
        m_InputButtons_Engine = m_InputButtons.FindAction("Engine", throwIfNotFound: true);
        m_InputButtons_Light = m_InputButtons.FindAction("Light", throwIfNotFound: true);
        m_InputButtons_Gearbox = m_InputButtons.FindAction("Gearbox", throwIfNotFound: true);
        m_InputButtons_Neutral = m_InputButtons.FindAction("Neutral", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputButtons
    private readonly InputActionMap m_InputButtons;
    private List<IInputButtonsActions> m_InputButtonsActionsCallbackInterfaces = new List<IInputButtonsActions>();
    private readonly InputAction m_InputButtons_Throttle;
    private readonly InputAction m_InputButtons_Brake;
    private readonly InputAction m_InputButtons_Steering;
    private readonly InputAction m_InputButtons_Handbrake;
    private readonly InputAction m_InputButtons_Engine;
    private readonly InputAction m_InputButtons_Light;
    private readonly InputAction m_InputButtons_Gearbox;
    private readonly InputAction m_InputButtons_Neutral;
    public struct InputButtonsActions
    {
        private @Multitool m_Wrapper;
        public InputButtonsActions(@Multitool wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_InputButtons_Throttle;
        public InputAction @Brake => m_Wrapper.m_InputButtons_Brake;
        public InputAction @Steering => m_Wrapper.m_InputButtons_Steering;
        public InputAction @Handbrake => m_Wrapper.m_InputButtons_Handbrake;
        public InputAction @Engine => m_Wrapper.m_InputButtons_Engine;
        public InputAction @Light => m_Wrapper.m_InputButtons_Light;
        public InputAction @Gearbox => m_Wrapper.m_InputButtons_Gearbox;
        public InputAction @Neutral => m_Wrapper.m_InputButtons_Neutral;
        public InputActionMap Get() { return m_Wrapper.m_InputButtons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IInputButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputButtonsActionsCallbackInterfaces.Add(instance);
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @Handbrake.started += instance.OnHandbrake;
            @Handbrake.performed += instance.OnHandbrake;
            @Handbrake.canceled += instance.OnHandbrake;
            @Engine.started += instance.OnEngine;
            @Engine.performed += instance.OnEngine;
            @Engine.canceled += instance.OnEngine;
            @Light.started += instance.OnLight;
            @Light.performed += instance.OnLight;
            @Light.canceled += instance.OnLight;
            @Gearbox.started += instance.OnGearbox;
            @Gearbox.performed += instance.OnGearbox;
            @Gearbox.canceled += instance.OnGearbox;
            @Neutral.started += instance.OnNeutral;
            @Neutral.performed += instance.OnNeutral;
            @Neutral.canceled += instance.OnNeutral;
        }

        private void UnregisterCallbacks(IInputButtonsActions instance)
        {
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @Handbrake.started -= instance.OnHandbrake;
            @Handbrake.performed -= instance.OnHandbrake;
            @Handbrake.canceled -= instance.OnHandbrake;
            @Engine.started -= instance.OnEngine;
            @Engine.performed -= instance.OnEngine;
            @Engine.canceled -= instance.OnEngine;
            @Light.started -= instance.OnLight;
            @Light.performed -= instance.OnLight;
            @Light.canceled -= instance.OnLight;
            @Gearbox.started -= instance.OnGearbox;
            @Gearbox.performed -= instance.OnGearbox;
            @Gearbox.canceled -= instance.OnGearbox;
            @Neutral.started -= instance.OnNeutral;
            @Neutral.performed -= instance.OnNeutral;
            @Neutral.canceled -= instance.OnNeutral;
        }

        public void RemoveCallbacks(IInputButtonsActions instance)
        {
            if (m_Wrapper.m_InputButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputButtonsActions @InputButtons => new InputButtonsActions(this);
    private int m_KeyboardmouseSchemeIndex = -1;
    public InputControlScheme KeyboardmouseScheme
    {
        get
        {
            if (m_KeyboardmouseSchemeIndex == -1) m_KeyboardmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&mouse");
            return asset.controlSchemes[m_KeyboardmouseSchemeIndex];
        }
    }
    public interface IInputButtonsActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnEngine(InputAction.CallbackContext context);
        void OnLight(InputAction.CallbackContext context);
        void OnGearbox(InputAction.CallbackContext context);
        void OnNeutral(InputAction.CallbackContext context);
    }
}
